/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./examples/test.js":
/*!**************************!*\
  !*** ./examples/test.js ***!
  \**************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _src_e__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../src/e */ "./src/e.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


var btn = document.getElementById('btn');
var btn2 = document.getElementById('btn2');
var btn4 = document.getElementById('btn4');
var E = new _src_e__WEBPACK_IMPORTED_MODULE_0__["default"]();

var Foo =
/*#__PURE__*/
function () {
  function Foo() {
    var _this = this;

    _classCallCheck(this, Foo);

    _defineProperty(this, "offHandler", function () {
      E.off('click', btn, _this.onceHandler);
      E.off('click', '#btn3', _this.onceHandler);
    });
  }

  _createClass(Foo, [{
    key: "init",
    value: function init() {
      E.bindAll(this);
      E.on('click', btn, this.eventHandler);
      E.on('click', btn2, this.offHandler);
      E.delegate('click', '#btn3', this.onceHandler);
      E.delegate('click', '.deep', this.delegateHandler);
      E.delegate('mouseenter', '#mouseover', function (e) {
        return console.log('delegated mouse enter');
      });
      E.delegate('mouseleave', '#mouseover', function (e) {
        return console.log('delegated mouse leave');
      }); // Event bus example

      E.on('event.bus.event', this.listener);
      E.on('click', '#bus-test', this.triggerBus);
      E.on('click', '#bus-off', this.removeBus);
    }
  }, {
    key: "onceHandler",
    value: function onceHandler(e) {
      console.log('delegated event target test', e);
    }
  }, {
    key: "eventHandler",
    value: function eventHandler(e) {
      console.log('Dom event test', e);
    }
  }, {
    key: "delegateHandler",
    value: function delegateHandler(e) {
      console.log('delegated nested event target test', e);
    }
  }, {
    key: "triggerBus",
    value: function triggerBus() {
      console.log('triggering event.bus.event event');
      E.emit('event.bus.event', 'one', 2);
    }
  }, {
    key: "removeBus",
    value: function removeBus() {
      E.off('event.bus.event', this.listener);
    }
  }, {
    key: "listener",
    value: function listener(arg1, arg2) {
      console.log('Triggered via the event bus!', arg1, arg2);
    }
  }]);

  return Foo;
}();

_defineProperty(Foo, "bar", 'foobar');

var bar = new Foo();
bar.init();

/***/ }),

/***/ "./node_modules/selector-set/selector-set.next.js":
/*!********************************************************!*\
  !*** ./node_modules/selector-set/selector-set.next.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SelectorSet; });
// Public: Create a new SelectorSet.
function SelectorSet() {
  // Construct new SelectorSet if called as a function.
  if (!(this instanceof SelectorSet)) {
    return new SelectorSet();
  }

  // Public: Number of selectors added to the set
  this.size = 0;

  // Internal: Incrementing ID counter
  this.uid = 0;

  // Internal: Array of String selectors in the set
  this.selectors = [];

  // Internal: All Object index String names mapping to Index objects.
  this.indexes = Object.create(this.indexes);

  // Internal: Used Object index String names mapping to Index objects.
  this.activeIndexes = [];
}

// Detect prefixed Element#matches function.
var docElem = window.document.documentElement;
var matches = (docElem.matches ||
                docElem.webkitMatchesSelector ||
                docElem.mozMatchesSelector ||
                docElem.oMatchesSelector ||
                docElem.msMatchesSelector);

// Public: Check if element matches selector.
//
// Maybe overridden with custom Element.matches function.
//
// el       - An Element
// selector - String CSS selector
//
// Returns true or false.
SelectorSet.prototype.matchesSelector = function(el, selector) {
  return matches.call(el, selector);
};

// Public: Find all elements in the context that match the selector.
//
// Maybe overridden with custom querySelectorAll function.
//
// selectors - String CSS selectors.
// context   - Element context
//
// Returns non-live list of Elements.
SelectorSet.prototype.querySelectorAll = function(selectors, context) {
  return context.querySelectorAll(selectors);
};


// Public: Array of indexes.
//
// name     - Unique String name
// selector - Function that takes a String selector and returns a String key
//            or undefined if it can't be used by the index.
// element  - Function that takes an Element and returns an Array of String
//            keys that point to indexed values.
//
SelectorSet.prototype.indexes = [];

// Index by element id
var idRe = /^#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/g;
SelectorSet.prototype.indexes.push({
  name: 'ID',
  selector: function matchIdSelector(sel) {
    var m;
    if (m = sel.match(idRe)) {
      return m[0].slice(1);
    }
  },
  element: function getElementId(el) {
    if (el.id) {
      return [el.id];
    }
  }
});

// Index by all of its class names
var classRe = /^\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/g;
SelectorSet.prototype.indexes.push({
  name: 'CLASS',
  selector: function matchClassSelector(sel) {
    var m;
    if (m = sel.match(classRe)) {
      return m[0].slice(1);
    }
  },
  element: function getElementClassNames(el) {
    var className = el.className;
    if (className) {
      if (typeof className === 'string') {
        return className.split(/\s/);
      } else if (typeof className === 'object' && 'baseVal' in className) {
        // className is a SVGAnimatedString
        // global SVGAnimatedString is not an exposed global in Opera 12
        return className.baseVal.split(/\s/);
      }
    }
  }
});

// Index by tag/node name: `DIV`, `FORM`, `A`
var tagRe = /^((?:[\w\u00c0-\uFFFF\-]|\\.)+)/g;
SelectorSet.prototype.indexes.push({
  name: 'TAG',
  selector: function matchTagSelector(sel) {
    var m;
    if (m = sel.match(tagRe)) {
      return m[0].toUpperCase();
    }
  },
  element: function getElementTagName(el) {
    return [el.nodeName.toUpperCase()];
  }
});

// Default index just contains a single array of elements.
SelectorSet.prototype.indexes['default'] = {
  name: 'UNIVERSAL',
  selector: function() {
    return true;
  },
  element: function() {
    return [true];
  }
};


// Use ES Maps when supported
var Map;
if (typeof window.Map === 'function') {
  Map = window.Map;
} else {
  Map = (function() {
    function Map() {
      this.map = {};
    }
    Map.prototype.get = function(key) {
      return this.map[key + ' '];
    };
    Map.prototype.set = function(key, value) {
      this.map[key + ' '] = value;
    };
    return Map;
  })();
}


// Regexps adopted from Sizzle
//   https://github.com/jquery/sizzle/blob/1.7/sizzle.js
//
var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g;

// Internal: Get indexes for selector.
//
// selector - String CSS selector
//
// Returns Array of {index, key}.
function parseSelectorIndexes(allIndexes, selector) {
  allIndexes = allIndexes.slice(0).concat(allIndexes['default']);

  var allIndexesLen = allIndexes.length,
      i, j, m, dup, rest = selector,
      key, index, indexes = [];

  do {
    chunker.exec('');
    if (m = chunker.exec(rest)) {
      rest = m[3];
      if (m[2] || !rest) {
        for (i = 0; i < allIndexesLen; i++) {
          index = allIndexes[i];
          if (key = index.selector(m[1])) {
            j = indexes.length;
            dup = false;
            while (j--) {
              if (indexes[j].index === index && indexes[j].key === key) {
                dup = true;
                break;
              }
            }
            if (!dup) {
              indexes.push({index: index, key: key});
            }
            break;
          }
        }
      }
    }
  } while (m);

  return indexes;
}

// Internal: Find first item in Array that is a prototype of `proto`.
//
// ary   - Array of objects
// proto - Prototype of expected item in `ary`
//
// Returns object from `ary` if found. Otherwise returns undefined.
function findByPrototype(ary, proto) {
  var i, len, item;
  for (i = 0, len = ary.length; i < len; i++) {
    item = ary[i];
    if (proto.isPrototypeOf(item)) {
      return item;
    }
  }
}

// Public: Log when added selector falls under the default index.
//
// This API should not be considered stable. May change between
// minor versions.
//
// obj - {selector, data} Object
//
//   SelectorSet.prototype.logDefaultIndexUsed = function(obj) {
//     console.warn(obj.selector, "could not be indexed");
//   };
//
// Returns nothing.
SelectorSet.prototype.logDefaultIndexUsed = function() {};

// Public: Add selector to set.
//
// selector - String CSS selector
// data     - Optional data Object (default: undefined)
//
// Returns nothing.
SelectorSet.prototype.add = function(selector, data) {
  var obj, i, indexProto, key, index, objs,
      selectorIndexes, selectorIndex,
      indexes = this.activeIndexes,
      selectors = this.selectors;

  if (typeof selector !== 'string') {
    return;
  }

  obj = {
    id: this.uid++,
    selector: selector,
    data: data
  };

  selectorIndexes = parseSelectorIndexes(this.indexes, selector);
  for (i = 0; i < selectorIndexes.length; i++) {
    selectorIndex = selectorIndexes[i];
    key = selectorIndex.key;
    indexProto = selectorIndex.index;

    index = findByPrototype(indexes, indexProto);
    if (!index) {
      index = Object.create(indexProto);
      index.map = new Map();
      indexes.push(index);
    }

    if (indexProto === this.indexes['default']) {
      this.logDefaultIndexUsed(obj);
    }
    objs = index.map.get(key);
    if (!objs) {
      objs = [];
      index.map.set(key, objs);
    }
    objs.push(obj);
  }

  this.size++;
  selectors.push(selector);
};

// Public: Remove selector from set.
//
// selector - String CSS selector
// data     - Optional data Object (default: undefined)
//
// Returns nothing.
SelectorSet.prototype.remove = function(selector, data) {
  if (typeof selector !== 'string') {
    return;
  }

  var selectorIndexes, selectorIndex, i, j, k, selIndex, objs, obj;
  var indexes = this.activeIndexes;
  var removedIds = {};
  var removeAll = arguments.length === 1;

  selectorIndexes = parseSelectorIndexes(this.indexes, selector);
  for (i = 0; i < selectorIndexes.length; i++) {
    selectorIndex = selectorIndexes[i];

    j = indexes.length;
    while (j--) {
      selIndex = indexes[j];
      if (selectorIndex.index.isPrototypeOf(selIndex)) {
        objs = selIndex.map.get(selectorIndex.key);
        if (objs) {
          k = objs.length;
          while (k--) {
            obj = objs[k];
            if (obj.selector === selector && (removeAll || obj.data === data)) {
              objs.splice(k, 1);
              removedIds[obj.id] = true;
            }
          }
        }
        break;
      }
    }
  }

  this.size -= Object.keys(removedIds).length;
};

// Sort by id property handler.
//
// a - Selector obj.
// b - Selector obj.
//
// Returns Number.
function sortById(a, b) {
  return a.id - b.id;
}

// Public: Find all matching decendants of the context element.
//
// context - An Element
//
// Returns Array of {selector, data, elements} matches.
SelectorSet.prototype.queryAll = function(context) {
  if (!this.selectors.length) {
    return [];
  }

  var matches = {}, results = [];
  var els = this.querySelectorAll(this.selectors.join(', '), context);

  var i, j, len, len2, el, m, match, obj;
  for (i = 0, len = els.length; i < len; i++) {
    el = els[i];
    m = this.matches(el);
    for (j = 0, len2 = m.length; j < len2; j++) {
      obj = m[j];
      if (!matches[obj.id]) {
        match = {
          id: obj.id,
          selector: obj.selector,
          data: obj.data,
          elements: []
        };
        matches[obj.id] = match;
        results.push(match);
      } else {
        match = matches[obj.id];
      }
      match.elements.push(el);
    }
  }

  return results.sort(sortById);
};

// Public: Match element against all selectors in set.
//
// el - An Element
//
// Returns Array of {selector, data} matches.
SelectorSet.prototype.matches = function(el) {
  if (!el) {
    return [];
  }

  var i, j, k, len, len2, len3, index, keys, objs, obj, id;
  var indexes = this.activeIndexes, matchedIds = {}, matches = [];

  for (i = 0, len = indexes.length; i < len; i++) {
    index = indexes[i];
    keys = index.element(el);
    if (keys) {
      for (j = 0, len2 = keys.length; j < len2; j++) {
        if (objs = index.map.get(keys[j])) {
          for (k = 0, len3 = objs.length; k < len3; k++) {
            obj = objs[k];
            id = obj.id;
            if (!matchedIds[id] && this.matchesSelector(el, obj.selector)) {
              matchedIds[id] = true;
              matches.push(obj);
            }
          }
        }
      }
    }
  }

  return matches.sort(sortById);
};


/***/ }),

/***/ "./src/WeakSet.js":
/*!************************!*\
  !*** ./src/WeakSet.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * @module WeakSet
 */
if (typeof window.WeakSet !== 'function') {
  var counter = Date.now() % 1e9;

  window.WeakSet = window.WeakSet || function (data) {
    this.name = '__st' + (Math.random() * 1e9 >>> 0) + (counter++ + '__');
    data && data.forEach && data.forEach(this.add, this);
  };

  var proto = window.WeakSet.prototype;

  proto['add'] = function (val) {
    var name = this.name;
    if (!val[name]) Object.defineProperty(val, name, {
      value: true,
      writable: true
    });
    return this;
  };

  proto['delete'] = function (val) {
    if (!val[this.name]) return false;
    val[this.name] = undefined;
    return true;
  };

  proto['has'] = function (val) {
    return !!val[this.name];
  };
}

module.exports = window.WeakSet;

/***/ }),

/***/ "./src/e.js":
/*!******************!*\
  !*** ./src/e.js ***!
  \******************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return e; });
/* harmony import */ var _WeakSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./WeakSet */ "./src/WeakSet.js");
/* harmony import */ var _WeakSet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_WeakSet__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var selector_set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! selector-set */ "./node_modules/selector-set/selector-set.next.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to get private field on non-instance"); } if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }




var e =
/*#__PURE__*/
function () {
  function e() {
    var _this = this;

    _classCallCheck(this, e);

    _addDelegateTarget.add(this);

    _traverse.add(this);

    _makeBusStack.add(this);

    _maybeRunQuerySelector.add(this);

    _triggerBus.add(this);

    _eventTypes.set(this, {
      writable: true,
      value: {}
    });

    _listeners.set(this, {
      writable: true,
      value: {}
    });

    _handleDelegation.set(this, {
      writable: true,
      value: function value(e) {
        var matches = _classPrivateMethodGet(_this, _traverse, _traverse2).call(_this, _classPrivateFieldGet(_this, _eventTypes)[e.type], e.target);

        if (matches.length) {
          for (var i = 0; i < matches.length; i++) {
            for (var i2 = 0; i2 < matches[i].stack.length; i2++) {
              _classPrivateMethodGet(_this, _addDelegateTarget, _addDelegateTarget2).call(_this, e, matches[i].delegatedTarget);

              matches[i].stack[i2].data(e);
            }
          }
        }
      }
    });
  }

  _createClass(e, [{
    key: "bindAll",

    /**
     * Binds all provided methods to a provided context.
     *
     * @param {object} context
     * @param {array} [methods] Optional.
     */
    value: function bindAll(context, methods) {
      if (methods === undefined) {
        methods = Object.getOwnPropertyNames(Object.getPrototypeOf(context));
      }

      for (var i = 0; i < methods.length; i++) {
        context[methods[i]] = context[methods[i]].bind(context);
      }
    }
    /**
     * Bind event to a string, NodeList, or element.
     *
     * @param {string} event
     * @param {string|NodeList|HTMLElement} el
     * @param {*} [callback]
     */

  }, {
    key: "on",
    value: function on(event, el, callback) {
      if (typeof el === 'function' && callback === undefined) {
        _classPrivateMethodGet(this, _makeBusStack, _makeBusStack2).call(this, event);

        _classPrivateFieldGet(this, _listeners)[event].push(el);

        return;
      }

      if (el.nodeType && el.nodeType === 1) {
        el.addEventListener(event, callback);
        return;
      }

      el = _classPrivateMethodGet(this, _maybeRunQuerySelector, _maybeRunQuerySelector2).call(this, el);

      for (var i = 0; i < el.length; i++) {
        el[i].addEventListener(event, callback);
      }
    }
    /**
     * Add a delegated event.
     *
     * @param {string} event
     * @param {string|NodeList|HTMLElement} delegate
     * @param {*} [callback]
     */

  }, {
    key: "delegate",
    value: function delegate(event, _delegate, callback) {
      var map = _classPrivateFieldGet(this, _eventTypes)[event];

      if (map === undefined) {
        map = new selector_set__WEBPACK_IMPORTED_MODULE_1__["default"]();
        _classPrivateFieldGet(this, _eventTypes)[event] = map;
        document.addEventListener(event, _classPrivateFieldGet(this, _handleDelegation), true);
      }

      map.add(_delegate, callback);
    }
    /**
     * Remove a callback from a DOM element, or one or all Bus events.
     *
     * @param {string} event
     * @param {string|NodeList|HTMLElement|Undefined} [el]
     * @param {*} [callback]
     */

  }, {
    key: "off",
    value: function off(event, el, callback) {
      var map = _classPrivateFieldGet(this, _eventTypes)[event];

      if (el === undefined) {
        _classPrivateFieldGet(this, _listeners)[event] = [];
        return;
      }

      if (typeof el === 'function') {
        _classPrivateMethodGet(this, _makeBusStack, _makeBusStack2).call(this, event);

        for (var i = 0; i < _classPrivateFieldGet(this, _listeners)[event].length; i++) {
          if (_classPrivateFieldGet(this, _listeners)[event][i] === el) {
            _classPrivateFieldGet(this, _listeners)[event].splice(i, 1);
          }
        }

        return;
      }

      if (map !== undefined) {
        map.remove(el, callback);

        if (map.size === 0) {
          delete _classPrivateFieldGet(this, _eventTypes)[event];
          document.removeEventListener(event, _classPrivateFieldGet(this, _handleDelegation));
          return;
        }
      }

      if (el.removeEventListener !== undefined) {
        el.removeEventListener(event, callback);
        return;
      }

      el = _classPrivateMethodGet(this, _maybeRunQuerySelector, _maybeRunQuerySelector2).call(this, el);

      for (var _i = 0; _i < el.length; _i++) {
        el[_i].removeEventListener(event, callback);
      }
    }
    /**
     * Emit a DOM or Bus event.
     *
     * @param {string} event
     * @param {array} [args]
     */

  }, {
    key: "emit",
    value: function emit(event) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      _classPrivateMethodGet(this, _triggerBus, _triggerBus2).call(this, event, args);
    }
    /**
     * Trigger a bus stack.
     *
     * @param {string} event
     * @param args
     */

  }]);

  return e;
}();

var _eventTypes = new WeakMap();

var _listeners = new WeakMap();

var _triggerBus = new WeakSet();

var _maybeRunQuerySelector = new WeakSet();

var _makeBusStack = new WeakSet();

var _handleDelegation = new WeakMap();

var _traverse = new WeakSet();

var _addDelegateTarget = new WeakSet();

var _triggerBus2 = function _triggerBus2(event, args) {
  if (_classPrivateFieldGet(this, _listeners)[event]) {
    for (var i = 0; i < _classPrivateFieldGet(this, _listeners)[event].length; i++) {
      var _classPrivateFieldGet2;

      (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _listeners)[event])[i].apply(_classPrivateFieldGet2, _toConsumableArray(args));
    }
  }
};

var _maybeRunQuerySelector2 = function _maybeRunQuerySelector2(el) {
  return typeof el === 'string' ? document.querySelectorAll(el) : el;
};

var _makeBusStack2 = function _makeBusStack2(event) {
  if (_classPrivateFieldGet(this, _listeners)[event] === undefined) {
    _classPrivateFieldGet(this, _listeners)[event] = [];
  }
};

var _traverse2 = function _traverse2(listeners, target) {
  var queue = [];
  var node = target;

  do {
    if (node.nodeType !== 1) {
      break;
    }

    var matches = listeners.matches(node);

    if (matches.length) {
      queue.push({
        delegatedTarget: node,
        stack: matches
      });
    }
  } while (node = node.parentElement);

  return queue;
};

var _addDelegateTarget2 = function _addDelegateTarget2(event, delegatedTarget) {
  Object.defineProperty(event, 'delegatedTarget', {
    configurable: true,
    enumerable: true,
    value: delegatedTarget
  });
};



/***/ }),

/***/ 1:
/*!********************************!*\
  !*** multi ./examples/test.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\wamp64\www\gc\e\examples\test.js */"./examples/test.js");


/***/ })

/******/ });
//# sourceMappingURL=test.min.js.map